#!/bin/bash
input="../members-health-ios-backup/members-health-ios/MembersHealth/Sources/Strings/Health.strings"
input2="../members-health-ios-backup/members-health-ios/App/Pods/MembersLocalization/MembersLocalization/Resources/Common.strings"

pathToGlueCodeGen="../members-health-ios-backup/members-health-ios/string_gen.sh"
pathToMemberApp="../releases/memberapp-ios-2020.09.20/"
pathToMembersHealth="../members-health-ios-backup/members-health-ios"
samples="samples.txt"

matches=""
totalRepeatedStrings=0
totalRepeatitions=0

function findDuplications {
  echo -n "" > log.txt
  while IFS= read -r line
  do
    #all cases if more than one and not already printed
    count1=$(grep -c "$line;" $input | cut -d= -f2)
    count2=$(grep -c "$line;" $input2 | cut -d= -f2)
    total=$(( count1 + count2 ))

    inmatches=$(grep -c "$line, " <<< "$matches" | cut -d= -f2)

    [[ -s "$samples" ]] && insamples=$(grep -c "$line" $samples | cut -d= -f2) || insamples=1

    if [ "$total" -gt 1 ] && [ "$inmatches" -lt 1 ] && [ "$insamples" -gt 0 ]
    then
      matches+="$line, "

      echo "--------------------------------------" >> log.txt
      echo "There are $total repetitions of $line" >> log.txt
      echo "--------------------------------------" >> log.txt
      grep -n "$line;" $input $input2 >> log.txt

      if [ "$count2" -eq 0 ]
      then
        echo "------------------------------------"
        duplicateLines=$(grep "$line;" $input)
        echo "$duplicateLines"
        newKey=""
        echo "Enter generic key for ${line} or press [RETURN] to skip: "
        read </dev/tty newKey
        if [ "$newKey" != "" ]
        then
          echo "Removing old keys in health string"
          removeOldKeysFromHealth "$duplicateLines"
          
          echo "Replacing old keys in members health"
          replaceKeys "$duplicateLines" "$newKey"

          echo "Running glue code gen"
          sh $pathToGlueCodeGen $newKey $line
        fi
      fi

      totalRepeatitions=$(($totalRepeatitions + $total))
      totalRepeatedStrings=$(($totalRepeatedStrings + 1))
    fi
  done < <(sed -n 's/.*= \(.*\);/\1/p' $input $input2)
  echo "--------------------------------------" >> log.txt
  echo "GENERAL STATISTICS:" >> log.txt
  echo "--------------------------------------" >> log.txt
  echo "number of repeated strings:$totalRepeatedStrings" >> log.txt
  echo "number of repetitions:$totalRepeatitions" >> log.txt
  echo "all matched strings: $matches"  >> log.txt
}

function removeOldKeysFromHealth {
  while IFS= read -r line
  do
    lineNumber=$(grep -n -B 1 $line $input | head -n 1 | sed 's/-..*//g')
    startingLineNumber=$(($lineNumber - 1))
    sed -i.bak -e "$(($lineNumber - 1)),$(($lineNumber + 1))d" $input
  done < <(sed 's/[[:space:]].*//' <<< $1)
}

function replaceKeys {
  newkey="\"$2\""
  while IFS= read -r oldkey
  do
    #grep -rl "$oldkey" $pathToMemberApp
    grep -rl "$oldkey" $pathToMembersHealth | xargs sed -i '' -e "s/$oldkey/$newkey/g"
  done < <(sed 's/[[:space:]].*//' <<< $1)
}

findDuplications